---
description:
globs:
alwaysApply: true
---
# CHANGELOG.md 관리 가이드라인

이 문서는 `[CHANGELOG.md](mdc:CHANGELOG.md)` 파일을 효과적으로 관리하기 위한 규칙과 절차를 설명합니다.

## 1. 목적

`CHANGELOG.md` 파일은 프로젝트의 모든 주목할 만한 변경 사항을 시간 순서대로 기록하여, 사용자와 기여자가 버전 간의 차이점을 쉽게 이해할 수 있도록 돕습니다. 또한, GitHub Release 생성 시 릴리스 노트의 기반 자료로 활용될 수 있습니다.

## 2. 변경 사항 기록 시점

다음과 같은 경우 `CHANGELOG.md`의 `[미출시 (Unreleased)]` 섹션에 변경 사항을 기록합니다:

*   **새로운 기능 추가 완료 시**: 사용자에게 영향을 주는 새로운 기능이 구현되었을 때.
*   **기존 기능 변경 시**: 사용 방식이나 동작이 변경되었을 때.
*   **버그 수정 완료 시**: 사용자에게 영향을 주었던 버그가 해결되었을 때.
*   **기능 제거 시**: 기존 기능이 삭제되었을 때.
*   **성능 개선 또는 주요 리팩토링 완료 시**: 사용자 경험에 영향을 줄 수 있는 변경 사항.

> **팁**: 작은 커밋마다 변경 기록을 작성할 필요는 없습니다. 관련된 작업 단위가 완료되었을 때, 또는 Pull Request를 생성/병합하기 전에 해당 작업 내용을 요약하여 추가하는 것이 좋습니다.

## 3. 변경 사항 유형

`[미출시 (Unreleased)]` 섹션 아래에 다음 중 적절한 하위 섹션을 사용하여 변경 사항을 분류합니다:

*   `### 추가된 기능 (Added)`: 새로운 기능.
*   `### 변경된 점 (Changed)`: 기존 기능의 변경 사항.
*   `### 개선된 점 (Improved)`: 성능, UI/UX 등의 개선.
*   `### 수정된 버그 (Fixed)`: 버그 수정 내역.
*   `### 제거된 기능 (Removed)`: 제거된 기능.
*   `### 사용 중단 예정 (Deprecated)`: 곧 제거될 기능 (미리 알림).
*   `### 보안 (Security)`: 보안 취약점 수정.

각 항목은 간결하고 명확하게 작성하며, 사용자가 이해하기 쉬운 용어를 사용합니다.

## 4. 릴리스 준비

새로운 버전을 릴리스할 준비가 되면 다음 단계를 따릅니다:

1.  `[미출시 (Unreleased)]` 섹션에 기록된 모든 변경 사항이 정확하고 완전한지 검토합니다.
2.  `[미출시 (Unreleased)]` 섹션의 내용을 새로운 버전 번호와 릴리스 날짜가 포함된 섹션으로 이동합니다. 예를 들어, `v1.1.0` 버전을 릴리스한다면 다음과 같이 작성합니다:
    ```markdown
    ## [1.1.0] - YYYY-MM-DD
    ```
3.  이동한 내용 아래에는 이전 `[미출시 (Unreleased)]` 섹션에 있던 변경 사항 목록을 그대로 옮겨 적습니다.
4.  파일 상단에 새로운 `## [미출시 (Unreleased)]` 섹션을 다시 만듭니다. (향후 변경 사항 기록을 위해)
5.  `CHANGELOG.md` 파일의 변경 사항을 커밋합니다.
6.  해당 커밋에 새로운 버전 태그(예: `v1.1.0`)를 생성합니다.
7.  태그를 GitHub 저장소로 푸시하여 릴리스 워크플로우를 트리거합니다.

## 5. 예시

자세한 형식은 실제 `[CHANGELOG.md](mdc:CHANGELOG.md)` 파일을 참고하십시오.

---
이 가이드라인을 따르면 프로젝트의 변경 이력을 명확하게 관리하고, 모든 참여자가 최신 정보를 쉽게 공유할 수 있습니다.
